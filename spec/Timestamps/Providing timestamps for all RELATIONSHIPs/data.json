{
  "id": "MCA-67",
  "parent_id": "MCA-210",
  "title": "Providing timestamps for all RELATIONSHIPs",
  "user_story": "As an API consumer\\\nI want all RELATIONSHIPs to have timestamps\\\nSo I can assess how up-to-date the provided information is\n",
  "description": "# **Background Information**\n\nFor an API consumer the age of a relationship can be important information. Example use case: the user wants to fetch all relationships that have been created within the last 24 hours.\n\nThe database itself (Neo4j) does not create timestamps on its own. It needs to be handled by the app itself.\n\n# **The Mission**\n\nThe following properties have to be added to all relationships:\n\n* `created_at`: string (ISO 8601 formatted)\n* `updated_at`:  string (ISO 8601 formatted)\n\nWhenever a new relationship is created the `created_at` field needs to be added and filled with the current timestamp. The `updated_at` field gets the exact copy. Whenever relationship data changes, the `updated_at` field needs to be updated accordingly. The `created_at` field will not be touched again.\n\n# **Acceptance Criteria**\n\n**Behavior (Business logic)**\n\n* when creating a relationship\n  * the response contains the two fields `created_at` and `updated_at` which are both filled with the time of creation (server time)\n    * formatted according to the ISO 8601 standard, e.g. “2007-04-05T14:30:00Z”\n    * how those properties are handled and named in the database can be decided by the developer (ISO 8601 conformity not necessary, but the timestamps need to be transformable to it)\n  * when the user provides the fields `created_at` or `updated_at` they will be ignored\n    * the request is accepted without error but those fields are not evaluated\n* when requesting a single relationship (e.g. get all car models of brand x)\n  * the response contains the two fields `created_at` and `updated_at` which are both filled with the original time of creation\n* when requesting a list of relationships (get all brand-has-car-model relationships)\n  * the response contains a list of all relationships, where each of them contains the two fields `created_at` and `updated_at` (with the original time of creation)\n* when updating a relationship\n  * PLACEHOLDER (updating a relationship via API is not possible yet)\n\n# **Quality Gates**\n\n* Unit+Integration tests (Jest) are extended (100% coverage combined)\n* Behavior tests (Cucumber) are added (100% coverage)\n* OpenAPI spec is extended\n  * schema is still valid\n* Bruno collection is extended\n* Performance tests are extended\n  * tests are still green\n\n# **NOT in scope for this iteration**\n\n* proper JSON structure according to the JSON:API\n* updating the “updated\\_at“ field because nodes cannot be updated via API yet\n",
  "api_verb": null,
  "api_path": null,
  "response_options": [],
  "release_versions": [
    "0.11.0"
  ],
  "created_at": "2025-05-14T10:53:05.084+0200",
  "updated_at": "2025-09-18T09:12:27.953+0200"
}
