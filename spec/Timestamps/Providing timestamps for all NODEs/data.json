{
  "id": "MCA-17",
  "parent_id": "MCA-210",
  "title": "Providing timestamps for all NODEs",
  "user_story": "As an API consumer\\\nI want all nodes to have timestamps\\\nSo I can assess how up-to-date the provided information is\n",
  "description": "# **Background**\n\nFor an API consumer the age of a node or the last time a node was changed can be important information. Example use case: the user wants to fetch all nodes that have been touched within the last 24 hours.\n\nIn More Cars 1.0 each node has two timestamps - `created_at` and `updated_at`. They are stored in the database, but not exposed in the API. In the frontend they are only shown in the create/edit forms. The goal for More Cars 2.0 is to expose this information in all places where it makes sense.\n\nThe database itself (Neo4j) does not create those timestamps on its own. In More Cars 1.0 it is automatically created by the ORM. For More Cars 2.0 it needs to be handled by the app itself.\n\n# **Task**\n\nThe following properties have to be added to all node types (currently only Car Models):\n\n* `created_at`: string (ISO 8601 formatted)\n* `updated_at`:  string (ISO 8601 formatted)\n\nWhenever a new node is created the `created_at` field needs to be filled with the current timestamp. The `updated_at` field gets the exact copy. When the user edits an entry the `updated_at` field is updated accordingly. The `created_at` field will not be touched again.\n\n# **Acceptance Criteria**\n\n**Behavior (Business logic)**\n\n* when creating a node\n  * the response contains the two fields `created_at` and `updated_at` which are both filled with the time of creation (server time)\n    * formatted according to the ISO 8601 standard, e.g. “2007-04-05T14:30”\n    * how those properties are handled and named in the database can be decided by the developer (ISO 8601 conformity not necessary, but the timestamps need to be transformable to it)\n  * when the user provides the fields `created_at` or `updated_at` they will be ignored\n    * the request is accepted without error but those fields are not evaluated\n* when requesting a single node (e.g. “get car model by id“)\n  * the response contains the two fields `created_at` and `updated_at` which are both filled with the original time of creation\n* when requesting a list of nodes (e.g. “get all car models“)\n  * the response contains a list of all nodes, where each of them contain the two fields `created_at` and `updated_at` (with the original time of creation)\n* when updating a node\n  * PLACEHOLDER (updating a node via API is not possible yet)\n\n**Quality Gates**\n\n* Unit+Integration tests (Jest) are extended (100% coverage combined)\n* Behavior tests (Cucumber) are added (100% coverage)\n* OpenAPI spec is extended\n  * schema is still valid\n* Bruno collection is extended\n* Performance tests are extended\n  * tests are still green\n\n# **NOT in scope for this iteration**\n\n* proper JSON structure according to the JSON:API\n* updating the “updated\\_at“ field because nodes cannot be updated via API yet\n\nNo migration is needed for the existing Car Model nodes. There is no persisted production database yet. Test databases can be reset.\n",
  "api_verb": null,
  "api_path": null,
  "response_options": [],
  "release_versions": [
    "0.7.0"
  ],
  "created_at": "2025-05-01T09:45:06.651+0200",
  "updated_at": "2025-09-17T17:32:23.305+0200"
}
