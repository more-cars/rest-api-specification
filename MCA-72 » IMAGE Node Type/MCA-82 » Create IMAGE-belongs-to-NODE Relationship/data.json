{
  "id": "MCA-82",
  "parent_id": "MCA-72",
  "title": "Create IMAGE-belongs-to-NODE Relationship",
  "user_story": "As an API contributor\\\nI want to attach IMAGEs to CAR MODELs (and other types of nodes)\\\nSo I can create a visual representation of those nodes\n",
  "description": "# **Response**\n\n**Happy path**\n\n* positive HTTP status code (201)\n* a JSON confirming that both entities have been connected:\n  * `image_id`: integer\n  * `partner_node_id`: integer\n  * `relationship_id`: integer\n  * `relationship_name`: string\n\n**Unhappy path**\n\n* negative HTTP status code (404, 422)\n* a plain text response stating the problem\n\n# **Acceptance Criteria**\n\n**Behavior (Business Logic)**\n\n* the relationship is successfully created when provided with valid data\n  * status code `201`\n* the relationship is not created when the provided data was not valid\n  * `image` and/or `partner_node` not found → status code `404`\n  * `images` cannot be attached to themselves → `422`\n  * `images` cannot be attached to other `images` → `422`\n* the user can trigger the creation of the same relationship over and over again\n  * the result is always the same (idempotency)\n  * however this is achieved in the code resp. the database, the `More Cars ID` needs to stay the same\n* each `image` can be attached to multiple `nodes` of the *same&#x20;*&#x74;ype&#x20;\n  * e.g. two brands can have the same image\n* each `image` can be attached to multiple `nodes` of *different&#x20;*&#x74;ypes&#x20;\n  * e.g. a brand and a car model can have the same image\n\n# **NOT in scope for this iteration**\n\n* auth / security\n* proper JSON structure according to the JSON:API\n* returning the relationships in other places\n* deleting the relationship\n",
  "api_verb": "POST",
  "api_path": "/images/<image-id>/belongs-to-node/<node-id>",
  "response_options": [
    "201",
    "404"
  ],
  "release_versions": [
    "0.9.0"
  ],
  "created_at": "2025-05-18T10:49:46.774+0200",
  "updated_at": "2025-09-25T08:58:12.706+0200"
}
