{
  "id": "MCA-84",
  "parent_id": "MCA-211",
  "title": "Providing IDs for all NODEs",
  "user_story": "As an API consumer\\\nI need all NODEs to have an IDENTIFIER\\\nSo I can find the NODEs again to reference them in different contexts\n",
  "description": "# Background Information\n\nEach node needs to have a (unique) identifier. Without them it is impossible to find nodes again or to connect them with each other.&#x20;\n\nNeo4J automatically adds an `ID` and an `element ID` when a new node is created. But using them directly is problematic.&#x20;\n\n**Issue #1:** Whenever a node is deleted, its ID is released and Neo4J can (and will) use it again for new nodes. This can cause confusing when two or more nodes have/had the same ID.\n\n**Issue #2:** When migrating the database from More Cars 1.0 to 2.0 the old IDs need to be preserved. This is not possible when using Neo4J’s internal IDs. They are read-only. Every node would get a new ID. Every existing link to More Cars would be invalid then.\n\n# The Mission\n\nIn order to solve those issues the only option is to manage the IDs on application side. Creating a node needs to trigger a process that generates a unique ID and attaches it to the node. Where exactly this process happens doesn’t matter so much. Important is that a returned node always contains an ID. Meaning, it **cannot** be an asynchronous solution where the ID is added afterwards via a cron job. Using a synchronous solution here will make the response times a bit slower (a few milliseconds), but avoids complex business logic.\n\n# **Acceptance Criteria**\n\n* whenever a node is created the response has to contain an ID\n  * returned as field `id` from type `number`\n* whenever a node is requested the response has to contain an ID\n  * get by ID\n  * get all Brands, get all Car Models, get all Images, etc.\n* the generated ID is returned as a number (integer) within the 32-bit space\n  * this allows for up to 4 billion nodes → this will be more than enough for the next 10 or 20 years\n  * how this number is internally stored doesn’t matter, as long as it is returned as described above\n* the ID needs to be unique → no other node is allowed to have the same ID\n",
  "api_verb": null,
  "api_path": null,
  "response_options": [],
  "release_versions": [
    "0.8.0"
  ],
  "created_at": "2025-05-18T10:51:46.407+0200",
  "updated_at": "2025-06-10T13:02:59.867+0200"
}
