{
  "id": "MCA-240",
  "parent_id": "MCA-71",
  "title": "Create BRAND-has-IMAGE Relationship",
  "user_story": "As an API contributor\\\nI want to be able to attach IMAGEs to BRANDs\\\nSo I can illustrate them\n",
  "description": "# **Response**\n\n**Happy path**\n\n* positive HTTP status code (201)\n* a JSON confirming that both entities have been connected:\n  * `brand_id`: integer\n  * `image_id`: integer\n  * `relationship_id`: integer\n  * `relationship_name`: string\n  * `created_at`: string\n  * `updated_at`: string\n\n**Unhappy path**\n\n* negative HTTP status code (404)\n* a plain text response stating the problem\n\n# **Acceptance Criteria**\n\n**Behavior (Business Logic)**\n\n* the relationship is successfully created when provided with valid data\n  * status code `201`\n* the relationship is not created when the provided data was not valid\n  * `brand` and/or `image` not found → status code `404`\n  * `brand` cannot be attached to itself → `422` → already covered by the rule above\n  * `brand` cannot be attached to other `brand` → `422` → already covered by the rule above\n* the user can trigger the creation of the same relationship over and over again\n  * the result is always the same (idempotency)\n  * however this is achieved in the code resp. the database, the `More Cars ID` needs to stay the same\n* a `brand` can have 0, 1 or multiple `images`\n\n# **NOT in scope for this iteration**\n\n* auth / security\n* proper JSON structure according to the JSON:API\n* returning the relationships in other places\n* deleting the relationship\n",
  "api_verb": "POST",
  "api_path": "/brands/<brand-id>/has-image/<image-id>",
  "response_options": [
    "201",
    "404"
  ],
  "release_versions": [
    "0.12.0"
  ],
  "created_at": "2025-06-27T11:02:37.250+0200",
  "updated_at": "2025-09-25T08:59:18.879+0200"
}
